# -*- coding: utf-8 -*-
"""Copy of Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KaUvwBP9xLs3R0U3gq3rZMzaQ-FtIlhu
"""



import random

def display_board(board):
    """Displays the current state of the board."""
    print("-------------")
    for i in range(3):
        print("|", board[i*3], "|", board[i*3+1], "|", board[i*3+2], "|")
        print("-------------")

def is_winner(board, player):
    """Checks if the given player has won."""
    # Check rows, columns, and diagonals
    return ((board[0] == board[1] == board[2] == player) or
            (board[3] == board[4] == board[5] == player) or
            (board[6] == board[7] == board[8] == player) or
            (board[0] == board[3] == board[6] == player) or
            (board[1] == board[4] == board[7] == player) or
            (board[2] == board[5] == board[8] == player) or
            (board[0] == board[4] == board[8] == player) or
            (board[2] == board[4] == board[6] == player))

def is_board_full(board):
    """Checks if the board is full."""
    return " " not in board

def get_player_move(board, player):
    """Gets the player's move."""
    while True:
        try:
            move = int(input(f"Player {player}, enter your move (1-9): ")) - 1
            if move >= 0 and move <= 8 and board[move] == " ":
                return move
            else:
                print("Invalid move. Please try again.")
        except ValueError:
            print("Invalid input. Please enter a number between 1 and 9.")

def play_game():
    """Plays a game of Tic Tac Toe between two players."""
    # Initial board state with 3 empty tiles (adjust as needed)
    board = ["X", "O", "x",
             " ", " ", "O",
             "O", " ", "X"]

    # Check if the initial state has a winner
    if is_winner(board, "X") or is_winner(board, "O"):
        print("Initial board state has a winner. Please change the initial board configuration.")
        return

    display_board(board)

    current_player = "1"

    while True:
        player_symbol = "X" if current_player == "1" else "O"
        player_move = get_player_move(board, current_player)
        board[player_move] = player_symbol
        display_board(board)

        if is_winner(board, player_symbol):
            print(f"Player {current_player} wins!")
            break
        if is_board_full(board):
            print("It's a tie!")
            break

        # Switch player
        current_player = "2" if current_player == "1" else "1"

if __name__ == "__main__":
    play_game()

print("siddhant sahare 1bm23cs326")